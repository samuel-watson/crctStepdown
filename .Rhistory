.libPaths("C:/docs/R")
require(devtools)
require(testthat)
require(usethis)
usethis::use_test("test")
load_all()
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- lme4::glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=verbose)
load_all()
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- lme4::glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=verbose)
document()
unload()
load_all()
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- lme4::glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
data
fit1
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=verbose)
unload()
document()
load_all()
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- lme4::glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=verbose)
fitlist <- list(fit1, fit2)
class(fit1)
fit2 <- lme4::lmer(y2 ~ treat + (1|cl),
data=data)
class(fit2)
fit2 <- lme4::glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
unload()
document()
load_all()
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- lme4::glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=verbose)
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
unload()
document()
load_all()
help(stepdown)
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- lme4::glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
traceback()
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
summary(fit1)
fit1@call
fit1@call[[1]]
unload()
document()
load_all()
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- lme4::glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
unload()
load_all()
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
library(lme4)
fit1 <- glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
unload()
load_all()
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
unload()
load_all()
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
res2
class(res2)
res2$p_value
class(res2$p_value)
class(NA)
test_that("whole package", {
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
library(lme4)
fit1 <- glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
expect_s3_class(res2,"data.frame")
expect_s3_class(res2$p_value,"numeric")
expect_s3_class(res2$lower_ci,"numeric")
})
rm(list=l())
rm(list=ls())
test_that("whole package", {
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
library(lme4)
fit1 <- glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
pv <- res2$p_value
lc <- res2$lower_ci
expect_s3_class(res2,"data.frame")
expect_s3_class(pv,"numeric")
expect_s3_class(lc,"numeric")
})
type(c(2,3))
typeof(c(2,3))
typeof(NA)
test_that("whole package", {
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
library(lme4)
fit1 <- glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
pv <- res2$p_value
lc <- res2$lower_ci
expect_s3_class(res2,"data.frame")
expect_type(pv,"double")
expect_type(lc,"double")
})
check()
check()
help("strsplit")
check()
#generate sim data
data <- twoarm_sim()
delta <- data[[2]]
data <- data[[1]]
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit1@call
fit1@call[[1]]
fit1@call[[1]]<-"glmer"
fit1@call[[1]]
fit1@call
fit1 <- lme4::glmer(y1 ~ treat + (1|cl) ,
data=data,
family="poisson")
fit2 <- lme4::glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
fit1@call[[1]]
fit1@call[[1]]=="lme4::glmer"
fit1@call[[4]]
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
traceback()
outname_fit(fit1)
class(fit1)
unload()
load_all()
res2 <- stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = 100,
nsteps=100,
plots=FALSE,
verbose=TRUE)
check()
check()
rm(list=ls())
