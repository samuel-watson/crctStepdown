data <- data.frame(cl=rep(1:sum(nJ),each=N),
id = rep(1:N,sum(nJ)))
data$treat <- 0
data[data$cl %in% tr, 'treat'] <- 1
# alpha_1 <- rnorm(sum(nJ),0,sd=sqrt(sig_cl[1]))
# alpha_2 <- rnorm(sum(nJ),0,sd=sqrt(sig_cl[2]))
cv1 <- rho*sqrt(sig_cl[1])*sqrt(sig_cl[2])
Sig <- matrix(cv1, nrow=2, ncol=2)
diag(Sig) <- sig_cl
alpha <- mvtnorm::rmvnorm(sum(nJ), mean= mu, sigma=Sig)
data$y1 <- rnorm(nrow(data),beta[1]*data$treat + alpha[data$cl,1])
data$y2 <- rpois(nrow(data),exp(beta[2]*data$treat + alpha[data$cl,2]))
return(list(data,beta))
}
require(glmmr)
data <- twoarm_sim2(nJ=c(7,7),beta=rep(0,2),sig_cl=rep(0.05,2),rho=0)
cov1 <- Covariance$new(
formula = ~ (1|gr(cl)),
data=data[[1]],
parameters = c(0.25)
)
sigmat <- tcrossprod(as.matrix(cov1$Z))
runSim2Arm <- function(n_permute,
nsteps,
delta=c(0,0),
sig_cl=0.05,
rho=0,
verbose=FALSE,
plots=FALSE,
nJ=c(7,7),
type="rw",
weight = FALSE,
alpha = 0.05){
data <- twoarm_sim2(nJ=nJ,beta=delta,sig_cl=rep(sig_cl,2),rho=rho)
delta <- data[[2]]
data <- data[[1]]
fit1 <- lmer(y1 ~ treat + (1|cl) ,
data=data)
fit2 <- glmer(y2 ~ treat + (1|cl),
data=data,
family="poisson")
if(weight){
if(fit1@theta==0){
theta1 <- 0.05
} else {
theta1 <- fit1@theta^2
}
sig1 <- sigmat * theta1
diag(sig1) <- theta1 + 1
if(fit2@theta==0){
theta2 <- 0.05
} else {
theta2 <- fit2@theta^2
}
sig2 <- sigmat * theta2
diag(sig2) <- diag(sig2) + fitted(fit2)
siglist <- list(sig1,sig2)
} else {
siglist <- NULL
}
res2 <- tryCatch(stepdown(fitlist=list(fit1,fit2),
data=data,
n_permute = n_permute,
nsteps=nsteps,
plots=plots,
verbose=verbose,
type=type,
sigma = siglist,
alpha=alpha), error=function(e)NA)
if(!is.data.frame(res2)){
res2 <- data.frame(model=1:2,
mean = rep(NA,2),
lower_ci =rep(NA,2),
upper_ci = rep(NA,2),
p_value = rep(NA,2),
icc = rep(NA,2),
delta = delta)
} else {
res2$delta <- delta
}
return(res2)
}
library(lme4)
library(crctStepdown)
cp <- parallel::makeCluster(6)
parallel::clusterEvalQ(cp,library(lme4))
parallel::clusterEvalQ(cp,library(crctStepdown))
parallel::clusterExport(cp,ls()[!(grepl("res",ls())|grepl("c1",ls()))],envir = .GlobalEnv)
#b, rho=0
wres1bb <- pbapply::pbreplicate(10000,runSim2Arm(1000,1000,delta=c(0,0),type="br",weight = TRUE),cl=cp)
devtools::build(binary=TRUE)
install.packages("D:/Documents/R/crctStepdown/crctStepdown_0.4.2.zip",repos=NULL)
install.packages("D:/Documents/R/crctStepdown/crctStepdown_0.4.2.zip",repos=NULL)
devtools::build(binary=TRUE)
install.packages("D:/Documents/R/crctStepdown/crctStepdown_0.4.2.zip",repos=NULL)
install.packages("D:/Documents/R/crctStepdown/crctStepdown_0.4.2.zip",repos=NULL)
devtools::load_all()
require(lme4)
df <- read.csv("D:/Documents/Dropbox/My PC (DESKTOP-NAUP832)/Documents/2021/June/thrive_df.csv")
dfa <- df[!is.na(df$pa_1_c),]
# dfa <- dfa[!dfa$sme_id_master%in%unique(dfa[dfa$treat_lo==1,'sme_id_master']),]
# dfa <- dfa[!dfa$sme_id_master%in%unique(dfa[dfa$measure==0&dfa,'sme_id_master']),]
dfa <- dfa[dfa$group%in%c(1,2),]
dfa$provinfo <- I(dfa$provinfomentalhealth_c==1|dfa$provinfomskhealth_c==1|dfa$provinfolifestyhealth_c==1)*1
dfa$provinfo_all <- I(dfa$provinfomentalhealth_c==1&dfa$provinfomskhealth_c==1&dfa$provinfolifestyhealth_c==1)*1
dfa$provact <- I(dfa$provactservmentalhealth_c==1|dfa$provactservmskhealth_c==1|dfa$provactservlifestyhealth_c==1)*1
dfa$provact_all <- I(dfa$provactservmentalhealth_c==1&dfa$provactservmskhealth_c==1&dfa$provactservlifestyhealth_c==1)*1
dfa$tookpart <- I(dfa$tookpartmh_c==1|dfa$tookpartmsk_c==1|dfa$tookpartlife_c==1)*1
dfa$groupserv <- I(dfa$groupservmentalhealth_c==1|dfa$groupservmskhealth_c==1|dfa$groupservlifestyhealth_c==1)*1
dfa$conseff <- I(dfa$conseffmentalhealth_c==1|dfa$conseffmskhealth_c==1|dfa$consefflifestyhealth_c==1)*1
dfa$tookpart <- ifelse(!is.na(dfa$provinfo),ifelse(is.na(dfa$tookpart),0,dfa$tookpart),NA)
dfa <- dfa[!is.na(dfa$provinfo),]
dfa <- dfa[!is.na(dfa$provact),]
dfa <- dfa[!is.na(dfa$tookpart),]
dfa <- dfa[!is.na(dfa$groupserv),]
dfa <- dfa[!is.na(dfa$conseff),]
dfa$cl <- as.numeric(as.factor(dfa$sme_id_master))
dfa$cl_t <- paste0(dfa$cl,"_",dfa$baseline_endline_c)
dfa$t <- dfa$baseline_endline_c
dfa$treat <- dfa$treat_hi
rando <- function(nJ=NULL,nT=NULL){
ids <- sample(1:59,sample(c(29,30),1,0.5))
out <- data.frame(cl=ids,t=1)
return(out)
}
fit1 <- glmer(pa_1_c ~ treat +
(1|cl) + (1|cl_t),
data=dfa,
family="binomial")
fit2 <- glmer(provinfo_all ~ treat +
(1|cl) + (1|cl_t),
data=dfa,
family="binomial")
fit3 <- glmer(provact ~ treat +
(1|cl) + (1|cl_t),
data=dfa,
family="binomial")
fit4 <- glmer(conseff ~ treat +
(1|cl) + (1|cl_t),
data=dfa,
family="binomial")
fit5 <- glmer(tookpart ~ treat +
(1|cl) + (1|cl_t),
data=dfa,
family="binomial")
fit6 <- glmer(groupserv ~ treat +
(1|cl) + (1|cl_t),
data=dfa,
family="binomial")
resb <- stepdown(list(fit2,fit3),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=5000,
type="br",
plots = TRUE,
verbose=TRUE)
devtools::load_all()
resb <- stepdown(list(fit2,fit3),
data=dfa,
rand_func = "rando",
n_permute = 1000,
nsteps=500,
type="br",
plots = TRUE,
verbose=TRUE)
devtools::load_all()
resb <- stepdown(list(fit2,fit3),
data=dfa,
rand_func = "rando",
n_permute = 1000,
nsteps=500,
type="br",
plots = TRUE,
verbose=TRUE)
devtools::load_all()
resb <- stepdown(list(fit2,fit3),
data=dfa,
rand_func = "rando",
n_permute = 1000,
nsteps=500,
type="br",
plots = TRUE,
verbose=TRUE)
devtools::load_all()
resb <- stepdown(list(fit2,fit3),
data=dfa,
rand_func = "rando",
n_permute = 1000,
nsteps=500,
type="br",
plots = TRUE,
verbose=TRUE)
# generate sigma matrices
require(glmmrBase)
dfb <- nelder(~j(5)*t(6))
dfb <- dfa[,c('treat','cl','t')]
cov1 <- Covariance$new(
data=dfb,
formula = ~(1|gr(cl)),
parameters = c(0.25)
)
mod1 <- Model$new(
formula = ~ treat + (1|gr(cl)) +(1|gr(cl,t)),
mean = list(parameters = fit2@beta),
covariance = list(parameters = fit2@theta),
family = binomial(),
data = dfb
)
sig <- list(mod1$Sigma())
mod1$update_parameters(mean.pars = fit3@beta, cov.pars = fit3@theta)
sig[[2]] <- mod1$Sigma()
mod1$update_parameters(mean.pars = fit4@beta, cov.pars = fit4@theta)
sig[[3]] <- mod1$Sigma()
mod1$update_parameters(mean.pars = fit5@beta, cov.pars = fit5@theta)
sig[[4]] <- mod1$Sigma()
mod1$update_parameters(mean.pars = fit6@beta, cov.pars = fit6@theta)
sig[[5]] <- mod1$Sigma()
res <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 2000,
nsteps=2000,
plots = FALSE,
verbose=TRUE)
res
resb <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=5000,
type="br",
plots = TRUE,
verbose=TRUE,
ci_start_values = list(upper = res$upper_ci,
lower = res$lower_ci))
res$upper_ci
devtools::load_all()
resb <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=5000,
type="br",
plots = TRUE,
verbose=TRUE,
ci_start_values = list(upper = res$upper_ci,
lower = res$lower_ci))
devtools::load_all()
resb <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=5000,
type="br",
plots = TRUE,
verbose=TRUE,
ci_start_values = list(upper = res$upper_ci,
lower = res$lower_ci))
res
resb
lower_start <- res$lower_ci
upper_start <- res$upper_ci
lower_start
lower_start[1] <- 0
resb <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=5000,
type="br",
plots = TRUE,
verbose=TRUE,
ci_start_values = list(upper = upper_start,
lower = lower_start))
save.image("D:/Documents/Dropbox/My PC (DESKTOP-NAUP832)/Documents/stepdown_thrive.RData")
wresb <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=5000,
type="br",
plots = FALSE,
verbose=TRUE,sigma = sig,
ci_start_values = list(upper = upper_start,
lower = lower_start))
lower_start
sig[[2]]
wresb <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=5000,
type="br",
plots = FALSE,
verbose=TRUE,
sigma = sig,
ci_start_values = list(upper = upper_start,
lower = lower_start))
resh <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=5000,
type="hr",
plots = TRUE,
verbose=TRUE,
ci_start_values = list(upper = upper_start,
lower = lower_start))
resh
resh <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=10000,
type="hr",
plots = TRUE,
verbose=TRUE,
ci_start_values = list(upper = upper_start,
lower = lower_start))
resrw <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=10000,
type="rw",
plots = TRUE,
verbose=TRUE,
ci_start_values = list(upper = upper_start,
lower = lower_start))
p1 <- ggplot2::last_plot()
require(ggplot2)
p1 + labs(x="Iteration",y="Value")+
geom_hline(yintercept = 0, lty=2)+theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
22857/1203
resh
resrw
wresh <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 20,
nsteps=4000,
type="hr",
plots = TRUE,
verbose=TRUE,sigma=sig,
ci_start_values = list(upper = upper_start,
lower = lower_start))
resb
resrw
resb <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=10000,
type="br",
plots = TRUE,
verbose=TRUE,
ci_start_values = list(upper = upper_start,
lower = lower_start))
resb <- stepdown(list(fit2,fit3,fit4,fit5,fit6),
data=dfa,
rand_func = "rando",
n_permute = 4000,
nsteps=10000,
type="br",
plots = TRUE,
verbose=TRUE)
p1 <- ggplot2::last_plot()
require(ggplot2)
p1 + labs(x="Iteration",y="Value")+
geom_hline(yintercept = 0, lty=2)+theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
require(glmmrBase)
df <- nelder(~(cl(6)*t(7))>ind(10))
df$int <- 0
df[df$cl > df$t, 'int'] <- 1
mod <- Model$new(
formula = ~ factor(t) + int -1 + (1|gr(cl)) + (1|gr(t)),
mean = list(parameters = c(rnorm(7,0,0.1),0.3)),
covariance = list(parameters = c(0.05,0.01)),
family = gaussian(),
data = df
)
y <- mod$sim_data(type="data")
out3c <- mod$LA(y$y,verbose = TRUE)
out3d <- mod$LA(y$y,method = "nloptim",verbose=TRUE)
out3c <- mod$LA(y$y,verbose = TRUE)
traceback()
out3d
rm(list=ls())
gc()
install.packages("D:/Documents/R/glmmrBase_0.4.6.tar.gz")
require(glmmrBase)
df <- nelder(~(cl(6)*t(7))>ind(10))
df$int <- 0
df[df$cl > df$t, 'int'] <- 1
mod <- Model$new(
formula = ~ factor(t) + int -1 + (1|gr(cl)) + (1|gr(t)),
mean = list(parameters = c(rnorm(7,0,0.1),0.3)),
covariance = list(parameters = c(0.05,0.01)),
family = gaussian(),
data = df
)
y <- mod$sim_data(type="data")
out3c <- mod$LA(y$y,verbose = TRUE)
out3c
class(out3c)
out3c$coefficients$par
rownames(out3c$coefficients)
rownames(out3c$coefficients)
colnames(out3c$coefficients)
mod$mean$parameters
out3c$mean_form
out3c$family
family("gaussian")
do.call("gaussian")
do.call("gaussian",list())
fixeff(out3c$mean_form)
out3c$mean_form
gsub("int",out3c$mean_form)
gsub("int","",out3c$mean_form)
nchar(gsub("int","",out3c$mean_form))
grep("int",out3c$mean_form)
help(grepl)
grep("int",out3c$mean_form,value=TRUE)
out3c$mean_form[1]
out3c$mean_form[[1]]
substr(out3c$mean_form,1,1)
substr(out3c$mean_form,2,nchar(form1))
substr(out3c$mean_form,2,nchar(out3c$mean_form))
rm(list=ls())
install.packages("D:/Documents/R/glmmrBase_0.4.6.tar.gz",repos=NULL)
df <- nelder(~(cl(6)*t(7))>ind(10))
df$int <- 0
df[df$cl > df$t, 'int'] <- 1
require(glmmrBase)
df <- nelder(~(cl(6)*t(7))>ind(10))
df$int <- 0
df[df$cl > df$t, 'int'] <- 1
mod <- Model$new(
formula = ~ factor(t) + int -1 + (1|gr(cl)) + (1|gr(t)),
mean = list(parameters = c(rnorm(7,0,0.1),0.3)),
covariance = list(parameters = c(0.05,0.01)),
family = gaussian(),
data = df
)
y <- mod$sim_data(type="data")
out3c <- mod$LA(y$y,verbose = TRUE)
out3c$y
devtools::load_all()
y2 <- mod$sim_data(type="data")
out3c2 <- mod$LA(y2$y,verbose = TRUE)
out3c2 <- mod$LA(y2$y,verbose = TRUE)
stepdown(list(out3c,out3c2),tr_var = "int",cl_var = "cl",data = df,verbose = TRUE)
fitlist <- list(out3c,out3c2)
fitlist[[1]]$coefficients
devtools::load_all()
stepdown(list(out3c,out3c2),tr_var = "int",cl_var = "cl",data = df,verbose = TRUE)
st1 <- "++-int"
st1
gsub("++","+",st1)
gsub("\\+\\+","+",st1)
devtools::load_all()
stepdown(list(out3c,out3c2),tr_var = "int",cl_var = "cl",data = df,verbose = TRUE)
devtools::load_all()
stepdown(list(out3c,out3c2),tr_var = "int",cl_var = "cl",data = df,verbose = TRUE)
devtools::load_all()
stepdown(list(out3c,out3c2),tr_var = "int",cl_var = "cl",data = df,verbose = TRUE)
mod <- Model$new(
formula = ~ factor(t) + int -1 + (1|gr(cl)) + (1|gr(t)),
mean = list(parameters = c(rnorm(7,0,0.1),0.3)),
covariance = list(parameters = c(0.05,0.01)),
family = binomial(),
data = df
)
y <- mod$sim_data(type="data")
y2 <- mod$sim_data(type="data")
out3c <- mod$LA(y$y,verbose = TRUE)
out3c2 <- mod$LA(y2$y,verbose = TRUE)
out3c <- mod$LA(y$y,verbose = TRUE)
out3c2 <- mod$LA(y2$y,verbose = TRUE)
out3c2 <- mod$LA(y2$y,verbose = TRUE)
fitlist <- list(out3c,out3c2)
stepdown(list(out3c,out3c2),tr_var = "int",cl_var = "cl",data = df,verbose = TRUE)
out3c$family
devtools::load_all()
stepdown(list(out3c,out3c2),tr_var = "int",cl_var = "cl",data = df,verbose = TRUE)
rm(list=ls())
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::build()
install.packages("D:/Documents/R/crctStepdown/crctStepdown_0.5.1.tar.gz",repos=NULL)
devtools::unload()
install.packages("D:/Documents/R/crctStepdown/crctStepdown_0.5.1.tar.gz",repos=NULL)
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::unload()
install.packages("D:/Documents/R/crctStepdown/crctStepdown_0.5.1.tar.gz",repos=NULL)
install.packages("D:/Documents/R/crctStepdown/crctStepdown_0.5.1.tar.gz",repos=NULL)
.libPaths()
install.packages("D:/Documents/R/crctStepdown/crctStepdown_0.5.1.tar.gz",repos=NULL)
devtools::build()
